{"version":3,"sources":["SearchBar.js","SearchResultItem.js","SearchResultButtons.js","SearchResults.js","App.js","serviceWorker.js","index.js"],"names":["SearchBar","react_default","a","createElement","id","className","onSubmit","this","props","handleSearch","placeholder","type","Button","size","variant","Icon","Component","SearchResultItem","src","concat","imageSrc","SearchResultButtons","color","onClick","handleLoader","href","SearchResults","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","results","listItems","map","item","SearchResultItem_SearchResultItem","key","Math","random","Date","images","original","url","query","length","SearchResultButtons_SearchResultButtons","API_KEY","App","_this","_handleRequest","offset","newQuery","axios","get","state","limit","then","res","setState","data","_handleSearch","event","preventDefault","searchQuery","target","getElementsByTagName","value","_handleLoader","SearchBar_SearchBar","handleState","SearchResults_SearchResults","Boolean","window","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4c735bce.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport Button from '@material-ui/core/Button';\nimport Icon from '@material-ui/core/Icon';\n\n\nexport default class SearchBar extends Component {\n  render() {\n    return (\n\t<div id=\"top\"className=\"containerSearchBar\">\n\t<form onSubmit={ this.props.handleSearch } className=\"formSearchBar\">\n\t<input className=\"searchBar\" placeholder=\"Search GIFS Here\" type=\"text\"/>\n\t<Button size=\"small\" variant=\"outlined\" type=\"submit\"> <Icon>youtube_searched_for</Icon></Button>\n\t</form>\n\t</div>\n    )\n  }\n}\n","import React, { Component } from 'react';\n\nexport default class SearchResultItem extends Component {\n  render() {\n    return (\n\t<div className='search-results__list-item'>\n\t<img src={`${ this.props.imageSrc }`} />\n\t</div>\n    )\n  }\n}\n","import React, { Component } from 'react'; \nimport Button from '@material-ui/core/Button';\n\nexport default class SearchResultButtons extends Component {\n\n\trender() {\n\t\treturn (\n\t\t\t<div className='search-results-buttons'>\n\t\t\t\t<Button variant=\"contained\" color=\"primary\" className=\"LoadBtn\" onClick={this.props.handleLoader} type=\"submit\">More GIFS &#43;</Button>\n\t\t\t\t<Button variant=\"contained\" color=\"primary\" className=\"BacktoTopBtn\"> \n\t\t\t\t\t<a href=\"#top\" className=\"textBackToTop\" type=\"submit\">Back to Top</a>\n\t\t\t\t</Button>\n\t\t \t</div>\n\t\t)\n\t}\n\n}\n","import React, { Component } from 'react';\nimport SearchResultItem from './SearchResultItem';\nimport SearchResultButtons from './SearchResultButtons';\n\n\nexport default class SearchResults extends Component {\n  constructor(){\n    super();\n  }\n\n  render() {\n    let { results } = this.props;\n    const listItems = results.map( ( item ) => (\n\t<SearchResultItem key={ `Arigato_${ Math.random() * (new Date()) }` } imageSrc={ item.images.original.url } />\n    ) );\n\n    return (\n\t<div className='container-search-results'>\n\t<p className=\"search-title\"> Let the GIFS Begin: <b>{this.props.query}</b> </p>\n\t<div className='search-results-list'>\n  { listItems }\n  \n  { results.length > 0 ? <SearchResultButtons handleLoader={ this.props.handleLoader } /> : null }\n      </div>\n\t</div>\n    )\n  }\n}\n","import React, { Component } from 'react';\nimport axios from 'axios';\nimport SearchBar from './SearchBar';\nimport SearchResults from './SearchResults';\nimport './App.css';\n\nconst API_KEY = 'UidqL9grHHxhpKkNEj34UYzWGlROX85q';\n\nexport default class App extends Component {\n\tconstructor() {\n\t\tsuper();\n\t\tthis.state = {\n\t\t\tresults: [],\n\t\t\tsearchQuery: \"\",\n\t\t\tlimit: 25,\n\t\t\toffset: 0,\n\t\t}\n\t}\n\n\t_handleRequest = ( query, offset, newQuery ) => {\n\taxios.get(`https://api.giphy.com/v1/gifs/search?q=${ query }&api_key=${ API_KEY }&fmt=json&offset=${ offset }&limit=${ this.state.limit }`)\n\t\t.then( ( res ) => {\n\t\t\tif (newQuery) {\n\t\t\t\tthis.setState({\n\t\t\t\tresults: res.data.data \n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tthis.setState({\n\t\t\t\tresults: this.state.results.concat(res.data.data)\n\t\t\t\t})\n\t\t\t}\n\t\t}) \n\t}\n\n\t_handleSearch = ( event ) => {\n\t\tevent.preventDefault();\n\t\tconst searchQuery = event.target.getElementsByTagName('input')[0].value;\n\t\tthis._handleRequest( searchQuery, this.state.offset, searchQuery !== this.state.searchQuery );\n\t\tthis.setState({\n\t\t\tsearchQuery: searchQuery\n\t\t});\n\t}\n\n\t_handleLoader = ( event ) => {\n\t\tevent.preventDefault();\n\t\tlet offset = this.state.offset + this.state.limit;\n\t\tthis._handleRequest( this.state.searchQuery, offset );\n\t\tthis.setState({\n\t\t\toffset: offset\n\t\t});\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"containerApp\">\n\t\t\t\t<SearchBar handleSearch={ this._handleSearch } handleState={ this.state.searchQuery }  />\n\t\t\t\t<SearchResults handleLoader={ this._handleLoader } results={ this.state.results } query={this.state.searchQuery} />\n\t\t\t</div>\n\t\t)\n\t}\n}\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}